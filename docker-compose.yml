networks:
  vision-validator-node:
    name: vision-validator-node-${STACK_IDENTIFIER}-${INSTANCE-1}
    driver: overlay
    internal: true
    attachable: true
  vision-validator-node-primary:
    name: vision-validator-node-${STACK_IDENTIFIER}-primary
    driver: overlay
    attachable: true

services:
  app:
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    image: ${DOCKER_REGISTRY-vision}/validator-node-app:${DOCKER_TAG-local}
    build:
      context: .
      dockerfile: Dockerfile
      target: validatornode01
      x-bake:
        tags:
          - ${DOCKER_REGISTRY-visionweb3foundation}/validator-node-app:${DOCKER_TAG-local}
          - ${DOCKER_REGISTRY-visionweb3foundation}/validator-node-app:${EXTRA_TAG-local}
    networks:
      vision-validator-node:
      vision-validator-node-primary:
        aliases:
          - vision-validator-node-${INSTANCE-1}
    env_file: []
    environment:
      # Ignore the env file inside the docker container
      VISION_ENV_FILE: ' '
      APP_HOST: 0.0.0.0
      APP_PORT: 8080
      APP_MODE: ${APP_MODE-primary}
      APP_LOG_FILE_ENABLED: 'false'
      APP_LOG_FORMAT: human_readable
      DB_URL: postgresql+psycopg://vision-validator-node:vision@db/vision-validator-node
      CELERY_BROKER: amqp://vision-validator-node:vision@broker:5672/vision-validator-node
      CELERY_BACKEND: db+postgresql+psycopg://vision-validator-node:vision@db/vision-validator-node-celery
      DEV_MODE: ${DEV_MODE}
    ports:
      - 809${INSTANCE-0}:8080
    healthcheck:
      test: ["CMD", "/usr/bin/vision-validator-node-server", "--status"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      broker:
        condition: service_healthy
      db:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./vision
          target: /opt/vision/vision-service-node/lib/python3.13/site-packages/vision
        - action: sync+restart
          path: ./linux/scripts/start-web.py
          target: /opt/vision/vision-validator-node/bin/start-web.py
        - action: sync+restart
          path: ./linux/scripts/vision-validator-node-server
          target: /opt/vision/vision-validator-node/bin/vision-validator-node-server
        - action: sync+restart
          path: validator-node-config.yml
          target: /opt/vision/vision-validator-node/validator-node-config.yml
        - action: sync+restart
          path: alembic.ini
          target: /opt/vision/vision-validator-node/alembic.ini
        - action: sync+restart
          path: validator-node-config.env
          target: /root/validator-node-config.env
        - action: sync+restart
          path: bids.yml
          target: /etc/validator-node-bids.yml
        - action: rebuild
          path: Dockerfile
        - action: rebuild
          path: debian
        - action: rebuild
          path: configurator
        - action: rebuild
          path: linux/etc
        - action: rebuild
          path: pyproject.toml
        - action: rebuild
          path: poetry.lock

  worker:
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    image: ${DOCKER_REGISTRY-visionweb3foundation}/validator-node-worker:${DOCKER_TAG-local}
    build:
      context: .
      dockerfile: Dockerfile
      target: validatornode01-celery-worker
      x-bake:
        tags:
          - ${DOCKER_REGISTRY-visionweb3foundation}/validator-node-worker:${DOCKER_TAG-local}
          - ${DOCKER_REGISTRY-visionweb3foundation}/validator-node-worker:${EXTRA_TAG-local}
    networks:
      vision-validator-node:
    env_file: []
    environment:
      # Ignore the env file inside the docker container
      VISION_ENV_FILE: ' '
      VISION_CELERY_AUTORESTART: 'true'
      APP_HOST: 0.0.0.0
      APP_PORT: 8080
      APP_MODE: ${APP_MODE-primary}
      CELERY_LOG_FORMAT: human_readable
      CELERY_LOG_FILE_ENABLED: 'false'
      DB_URL: postgresql+psycopg://vision-validator-node:vision@db/vision-validator-node
      CELERY_BROKER: amqp://vision-validator-node:vision@broker:5672/vision-validator-node
      CELERY_BACKEND: db+postgresql+psycopg://vision-validator-node:vision@db/vision-validator-node-celery
      DEV_MODE: ${DEV_MODE}
    healthcheck:
      test: ["CMD", "/usr/bin/vision-validator-node-celery", "--status"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      app:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: ./vision
          target: /opt/vision/vision-validator-node/lib/python3.13/site-packages/vision
        - action: sync+restart
          path: ./linux/scripts/vision-validator-node-celery
          target: /opt/vision/vision-validator-node/bin/vision-validator-node-celery
        - action: sync+restart
          path: validator-node-config.yml
          target: /opt/vision/vision-validator-node/validator-node-config.yml
        - action: sync+restart
          path: alembic.ini
          target: /opt/vision/vision-validator-node/alembic.ini
        - action: sync+restart
          path: validator-node-config.env
          target: /root/validator-node-config.env
        - action: sync+restart
          path: bids.yml
          target: /etc/validator-node-bids.yml
        - action: rebuild
          path: Dockerfile
        - action: rebuild
          path: debian
        - action: rebuild
          path: configurator
        - action: rebuild
          path: linux/etc
        - action: rebuild
          path: pyproject.toml
        - action: rebuild
          path: poetry.lock

  db:
    image: postgres:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      vision-validator-node:
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - postgresql_data:/postgresql_data
      - type: bind
        source: ./db_init.sh
        target: /docker-entrypoint-initdb.d/init-user-db.sh
        read_only: true
    develop:
      watch:
        - action: rebuild
          path: db_init.sh

  broker:
    image: rabbitmq:latest
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    hostname: vision-validator-node
    networks:
      vision-validator-node:
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      RABBITMQ_DEFAULT_USER: vision-validator-node
      RABBITMQ_DEFAULT_PASS: vision
      RABBITMQ_DEFAULT_VHOST: vision-validator-node
    volumes:
      - rabbitmq_data:/rabbitmq_data

volumes:
  postgresql_data:
  rabbitmq_data:
